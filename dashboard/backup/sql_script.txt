CREATE DATABASE SupplyChain;
USE SupplyChain;

BEGIN NOT ATOMIC
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
        BEGIN
            ROLLBACK;
        END;
    START TRANSACTION;

    COMMIT;
END;

DELIMITER //
CREATE PROCEDURE create_initial_tables()
    BEGIN
        SET AUTOCOMMIT = 0;
        DECLARE _rollback BOOL DEFAULT 0;
        DECLARE CONTINUE HANDLER FOR SQLEXCEPTION SET _rollback = 1;
        START TRANSACTION;
            CREATE TABLE customer (
              customer_id INT AUTO_INCREMENT,
              email VARCHAR(100) NOT NULL,
              password VARCHAR(64) NOT NULL,
              customer_name VARCHAR(50) NOT NULL,
              phone_number CHAR(10) NOT NULL,
              address VARCHAR(100) NOT NULL,
              discount NUMERIC(4, 2) DEFAULT 0,
              type VARCHAR(10) NOT NULL,
              PRIMARY KEY (customer_id),
              UNIQUE (email, password),
              CHECK (type IN ('WHOLESALER', 'RETAILER', 'END_CUSTOMER'))
            );

            CREATE TABLE product (
              product_id INT AUTO_INCREMENT,
              product_name VARCHAR(50) NOT NULL,
              product_description VARCHAR(300) NOT NULL,
              image VARCHAR(100) NOT NULL,
              price NUMERIC(10, 2) NOT NULL,
              discount NUMERIC(4, 2) DEFAULT 0,
              train_capacity_consumption INT NOT NULL,
              PRIMARY KEY (product_id),
              CHECK (price > 0),
              CHECK (train_capacity_consumption > 0)
            );

            CREATE TABLE store (
              city VARCHAR(12),
              station VARCHAR(12) NOT NULL,
              capacity BIGINT NOT NULL,
              PRIMARY KEY (city),
              UNIQUE (station),
              CHECK (capacity > 0)
            );

            CREATE TABLE route (
              route_id INT AUTO_INCREMENT,
              route_map VARCHAR(300) NOT NULL,
              duration INT NOT NULL,
              status VARCHAR(6) NOT NULL,
              store VARCHAR(12) NOT NULL,
              PRIMARY KEY (route_id),
              FOREIGN KEY (store) REFERENCES store(city) ON DELETE CASCADE,
              CHECK (status IN ('USED', 'UNUSED')),
              CHECK (duration > 0)
            );

            CREATE TABLE truck (
              registration_no VARCHAR(8),
              capacity INT NOT NULL,
              status VARCHAR(12) NOT NULL,
              store VARCHAR(12),
              PRIMARY KEY (registration_no),
              FOREIGN KEY (store) REFERENCES store(city) ON DELETE SET NULL,
              CHECK (capacity > 0),
              CHECK (status IN ('AVAILABLE', 'UNAVAILABLE'))
            );

            CREATE TABLE driver (
              NIC VARCHAR(12),
              license_number VARCHAR(12) NOT NULL,
              name VARCHAR(50) NOT NULL,
              address VARCHAR(100) NOT NULL,
              phone_number CHAR(10) NOT NULL,
              store VARCHAR(12),
              PRIMARY KEY (NIC),
              FOREIGN KEY (store) REFERENCES store(city) ON DELETE SET NULL,
              UNIQUE (license_number)
            );

            CREATE TABLE driver_assistant (
              NIC VARCHAR(12),
              name VARCHAR(50) NOT NULL,
              address VARCHAR(100) NOT NULL,
              phone_number CHAR(10) NOT NULL,
              store VARCHAR(12),
              PRIMARY KEY (NIC),
              FOREIGN KEY (store) REFERENCES store(city) ON DELETE SET NULL
            );

            CREATE TABLE order_ (
              order_id INT AUTO_INCREMENT,
              order_date DATE NOT NULL,
              expected_delivery_date DATE NOT NULL,
              delivery_address VARCHAR(100) NOT NULL,
              payment_method VARCHAR(16) NOT NULL,
              status VARCHAR(22) NOT NULL,
              route INT NOT NULL,
              customer INT NOT NULL,
              PRIMARY KEY (order_id),
              FOREIGN KEY (route) REFERENCES route(route_id) ON DELETE CASCADE,
              FOREIGN KEY (customer) REFERENCES customer(customer_id) ON DELETE CASCADE,
              CHECK (payment_method IN ('CARD', 'CASH_ON_DELIVERY')),
              CHECK (status IN ('CONFIRMED', 'TRANSPORTING_TO_STORE', 'IN_STORE', 'DELIVERING', 'DELIVERED', 'CANCELED', 'RETURNING', 'RETURNED')),
              CHECK (DATEDIFF(expected_delivery_date, order_date) + 1 >= 7)
            );

            CREATE TABLE stores (
              order_id INT,
              store VARCHAR(12),
              type VARCHAR(8),
              PRIMARY KEY (order_id, store),
              FOREIGN KEY (order_id) REFERENCES order_(order_id) ON DELETE CASCADE,
              FOREIGN KEY (store) REFERENCES store(city) ON DELETE CASCADE,
              CHECK (type IN ('ORDER', 'RELOCATE', 'RETURN'))
            );

            CREATE TABLE delivery_schedule (
              delivery_id INT AUTO_INCREMENT,
              date DATE NOT NULL,
              start_time TIME NOT NULL,
              driver VARCHAR(12),
              driver_assistant VARCHAR(12),
              truck VARCHAR(8),
              PRIMARY KEY (delivery_id),
              FOREIGN KEY (truck) REFERENCES truck(registration_no) ON DELETE SET NULL,
              FOREIGN KEY (driver) REFERENCES driver(NIC) ON DELETE SET NULL,
              FOREIGN KEY (driver_assistant) REFERENCES driver_assistant(NIC) ON DELETE SET NULL
            );

            CREATE TABLE delivers (
              order_id INT,
              delivery_id INT,
              PRIMARY KEY (order_id, delivery_id),
              FOREIGN KEY (order_id) REFERENCES order_(order_id) ON DELETE CASCADE,
              FOREIGN KEY (delivery_id) REFERENCES delivery_schedule(delivery_id) ON DELETE CASCADE
            );

            CREATE TABLE store_includes (
              store VARCHAR(12),
              product_id INT,
              quantity INT NOT NULL,
              PRIMARY KEY (store, product_id),
              FOREIGN KEY (store) REFERENCES store(city) ON DELETE CASCADE,
              FOREIGN KEY (product_id) REFERENCES product(product_id) ON DELETE CASCADE,
              CHECK (quantity > 0)
            );

            CREATE TABLE train_schedule (
              trip_id INT AUTO_INCREMENT,
              day VARCHAR(10) NOT NULL,
              departure_time TIME NOT NULL,
              status VARCHAR(12) NOT NULL,
              allocated_capacity INT NOT NULL,
              departure_station VARCHAR(12) NOT NULL,
              PRIMARY KEY (trip_id),
              FOREIGN KEY (departure_station) REFERENCES store(city) ON DELETE CASCADE,
              CHECK (day IN ('MONDAY', 'TUESDAY', 'WEDNESDAY', 'THURSDAY', 'FRIDAY', 'SATURDAY', 'SUNDAY')),
              CHECK (status IN ('AVAILABLE', 'UNAVAILABLE')),
              CHECK (allocated_capacity > 0)
            );

            CREATE TABLE transports (
              order_id INT,
              trip_id INT,
              date DATE,
              PRIMARY KEY (order_id, trip_id, date),
              FOREIGN KEY (order_id) REFERENCES order_(order_id) ON DELETE CASCADE,
              FOREIGN KEY (trip_id) REFERENCES train_schedule(trip_id) ON DELETE CASCADE
            );

            CREATE TABLE destination (
              trip_id INT,
              destination_station VARCHAR(12),
              destination_time TIME NOT NULL,
              PRIMARY KEY (trip_id, destination_station),
              FOREIGN KEY (trip_id) REFERENCES train_schedule(trip_id) ON DELETE CASCADE,
              FOREIGN KEY (destination_station) REFERENCES store(city) ON DELETE CASCADE
            );

            CREATE TABLE order_includes (
              order_id INT,
              product_id INT,
              quantity INT NOT NULL,
              PRIMARY KEY (order_id, product_id),
              FOREIGN KEY (order_id) REFERENCES order_(order_id) ON DELETE CASCADE,
              FOREIGN KEY (product_id) REFERENCES product(product_id) ON DELETE CASCADE,
              CHECK (quantity > 0)
            );

            INSERT INTO store (city, station, capacity) VALUES ('COLOMBO', 'DEMATAGODA', '10000000000');
            INSERT INTO store (city, station, capacity) VALUES ('NEGOMBO', 'NEGOMBO', '6000000000');
            INSERT INTO store (city, station, capacity) VALUES ('GALLE', 'PIYADIGAMA', '5000000000');
            INSERT INTO store (city, station, capacity) VALUES ('MATARA', 'WALGAMA', '4000000000');
            INSERT INTO store (city, station, capacity) VALUES ('JAFFNA', 'PUNKANKULAM', '6000000000');
            INSERT INTO store (city, station, capacity) VALUES ('TRINCOMALEE', 'CHINA BAY', '5000000000');
            INSERT INTO store (city, station, capacity) VALUES ('KANDY', 'SUDUHUMPOLA', '30000000000');
        IF _rollback THEN
            ROLLBACK;
        ELSE
            COMMIT;
        END IF;
    END;//

DELIMITER ;

